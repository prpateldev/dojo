-- Package declaration syntax 
CREATE
OR REPLACE PACKAGE package_name AS programme_1_header;

programme_2_header;

programme_3_header;

END package_name;

-- Package body declaration syntax 
CREATE
OR REPLACE PACKAGE BODY package_name AS programme_1_header;

programme_2_header;

programme_3_header;

END package_name;

CREATE
OR REPLACE PACKAGE customer_package AS -- you can add procedures and functions
PROCEDURE FETCH_SALES (S_ORDERID NUMBER);

FUNCTION find_salescount (p_sales_date IN DATE) RETURN number;

END customer_package;

CREATE
OR REPLACE PACKAGE BODY package_name AS PROCEDURE FETCH_SALES (S_ORDERID NUMBER) AS L_DATE SALES.SALES_DATE % TYPE;

L_ORDERID SALES.ORDER_ID % TYPE;

L_PRODUCTID SALES.PRODUCT_ID % TYPE;

L_CUSTOMERID SALES.CUSTOMER_ID % TYPE;

L_SALESPERSONID SALES.SALESPERSON_ID % TYPE;

L_QUANTITY SALES.QUANTITY % TYPE;

L_UNITPRICE SALES.UNIT_PRICE % TYPE;

L_SALESAMOUNT SALES.SALES_AMOUNT % TYPE;

L_TAXAMOUNT SALES.TAX_AMOUNT % TYPE;

L_TOTALAMOUNT SALES.TOTAL_AMOUNT % TYPE;

BEGIN
SELECT
  SALES_DATE,
  ORDER_ID,
  PRODUCT_ID,
  CUSTOMER_ID,
  SALESPERSON_ID,
  QUANTITY,
  UNIT_PRICE,
  SALES_AMOUNT,
  TAX_AMOUNT,
  TOTAL_AMOUNT INTO L_DATE,
  L_ORDERID,
  L_PRODUCTID,
  L_CUSTOMERID,
  L_SALESPERSONID,
  L_QUANTITY,
  L_UNITPRICE,
  L_SALESAMOUNT,
  L_TAXAMOUNT,
  L_TOTALAMOUNT
FROM
  SALES
WHERE
  ORDER_ID = S_ORDERID;

DBMS_OUTPUT.PUT_LINE (L_DATE);

DBMS_OUTPUT.PUT_LINE (L_ORDERID);

DBMS_OUTPUT.PUT_LINE (L_PRODUCTID);

DBMS_OUTPUT.PUT_LINE (L_CUSTOMERID);

DBMS_OUTPUT.PUT_LINE (L_SALESPERSONID);

DBMS_OUTPUT.PUT_LINE (L_QUANTITY);

DBMS_OUTPUT.PUT_LINE (L_UNITPRICE);

DBMS_OUTPUT.PUT_LINE (L_SALESAMOUNT);

DBMS_OUTPUT.PUT_LINE (L_TAXAMOUNT);

DBMS_OUTPUT.PUT_LINE (L_TOTALAMOUNT);

END;

FUNCTION find_salescount (p_sales_date IN DATE) RETURN number AS number_of_sales number := 0;

BEGIN
SELECT
  COUNT(*) INTO number_of_sales
FROM
  sales
WHERE
  sales_date = p_sales_date;

RETURN number_of_sales;

END find_salescount;

END package_name;

-- To call procedure from package
EXECUTE customer_package.FETCH_SALES (10);

-- To call function from package
EXECUTE customer_package.find_salescount ('01-jan-2024');

/*
 ***************************************
 ***************************************
 ******* Another Package Example *******
 ***************************************
 ***************************************
 */
CREATE
OR REPLACE PACKAGE BODY SALES_PACKAGE AS PROCEDURE FETCH_SALES (S_ORDERID NUMBER) AS L_DATE SALES.SALES_DATE % TYPE;

L_ORDERID SALES.ORDER_ID % TYPE;

L_PRODUCTID SALES.PRODUCT_ID % TYPE;

L_CUSTOMERID SALES.CUSTOMER_ID % TYPE;

L_SALESPERSONID SALES.SALESPERSON_ID % TYPE;

L_QUANTITY SALES.QUANTITY % TYPE;

L_UNITPRICE SALES.UNIT_PRICE % TYPE;

L_SALESAMOUNT SALES.SALES_AMOUNT % TYPE;

L_TAXAMOUNT SALES.TAX_AMOUNT % TYPE;

L_TOTALAMOUNT SALES.TOTAL_AMOUNT % TYPE;

BEGIN
SELECT
  SALES_DATE,
  ORDER_ID,
  PRODUCT_ID,
  CUSTOMER_ID,
  SALESPERSON_ID,
  QUANTITY,
  UNIT_PRICE,
  SALES_AMOUNT,
  TAX_AMOUNT,
  TOTAL_AMOUNT INTO L_DATE,
  L_ORDERID,
  L_PRODUCTID,
  L_CUSTOMERID,
  L_SALESPERSONID,
  L_QUANTITY,
  L_UNITPRICE,
  L_SALESAMOUNT,
  L_TAXAMOUNT,
  L_TOTALAMOUNT
FROM
  SALES
WHERE
  ORDER_ID = S_ORDERID;

DBMS_OUTPUT.PUT_LINE (L_DATE);

DBMS_OUTPUT.PUT_LINE (L_ORDERID);

DBMS_OUTPUT.PUT_LINE (L_PRODUCTID);

DBMS_OUTPUT.PUT_LINE (L_CUSTOMERID);

DBMS_OUTPUT.PUT_LINE (L_SALESPERSONID);

DBMS_OUTPUT.PUT_LINE (L_QUANTITY);

DBMS_OUTPUT.PUT_LINE (L_UNITPRICE);

DBMS_OUTPUT.PUT_LINE (L_SALESAMOUNT);

DBMS_OUTPUT.PUT_LINE (L_TAXAMOUNT);

DBMS_OUTPUT.PUT_LINE (L_TOTALAMOUNT);

EXCEPTION WHEN no_data_found THEN dbms_output.put_line ('No such Order!');

WHEN too_many_rows THEN dbms_output.put_line ('You got more than 1 row!');

WHEN others THEN dbms_output.put_line ('Error!');

END;

PROCEDURE FETCH_SALES1 (S_ORDERID IN NUMBER, L_TOTALROWS OUT NUMBER) AS L_DATE SALES.SALES_DATE % TYPE;

L_ORDERID SALES.ORDER_ID % TYPE;

L_PRODUCTID SALES.PRODUCT_ID % TYPE;

L_CUSTOMERID SALES.CUSTOMER_ID % TYPE;

L_SALESPERSONID SALES.SALESPERSON_ID % TYPE;

L_QUANTITY SALES.QUANTITY % TYPE;

L_UNITPRICE SALES.UNIT_PRICE % TYPE;

L_SALESAMOUNT SALES.SALES_AMOUNT % TYPE;

L_TAXAMOUNT SALES.TAX_AMOUNT % TYPE;

L_TOTALAMOUNT SALES.TOTAL_AMOUNT % TYPE;

BEGIN
SELECT
  SALES_DATE,
  ORDER_ID,
  PRODUCT_ID,
  CUSTOMER_ID,
  SALESPERSON_ID,
  QUANTITY,
  UNIT_PRICE,
  SALES_AMOUNT,
  TAX_AMOUNT,
  TOTAL_AMOUNT INTO L_DATE,
  L_ORDERID,
  L_PRODUCTID,
  L_CUSTOMERID,
  L_SALESPERSONID,
  L_QUANTITY,
  L_UNITPRICE,
  L_SALESAMOUNT,
  L_TAXAMOUNT,
  L_TOTALAMOUNT
FROM
  SALES
WHERE
  ORDER_ID = S_ORDERID;

DBMS_OUTPUT.PUT_LINE (L_DATE);

DBMS_OUTPUT.PUT_LINE (L_ORDERID);

DBMS_OUTPUT.PUT_LINE (L_PRODUCTID);

DBMS_OUTPUT.PUT_LINE (L_CUSTOMERID);

DBMS_OUTPUT.PUT_LINE (L_SALESPERSONID);

DBMS_OUTPUT.PUT_LINE (L_QUANTITY);

DBMS_OUTPUT.PUT_LINE (L_UNITPRICE);

DBMS_OUTPUT.PUT_LINE (L_SALESAMOUNT);

DBMS_OUTPUT.PUT_LINE (L_TAXAMOUNT);

DBMS_OUTPUT.PUT_LINE (L_TOTALAMOUNT);

SELECT
  COUNT(1) INTO L_TOTALROWS
FROM
  SALES
WHERE
  SALES_DATE = L_DATE;

EXCEPTION WHEN no_data_found THEN dbms_output.put_line ('No such Order!');

WHEN too_many_rows THEN dbms_output.put_line ('You got more than 1 row!');

WHEN others THEN dbms_output.put_line ('Error!');

END;

FUNCTION MY_POWER (N1 IN NUMBER, N2 IN NUMBER) RETURN NUMBER AS POWER_VALUE NUMBER := 1;

BEGIN FOR LCNTR IN 1..N2 LOOP POWER_VALUE := POWER_VALUE * N1;

END LOOP;

RETURN POWER_VALUE;

EXCEPTION WHEN others THEN dbms_output.put_line ('Error!');

END;

FUNCTION GET_COUNT (S_DATE DATE) RETURN NUMBER AS T_ROWS NUMBER;

BEGIN
SELECT
  COUNT(1) INTO T_ROWS
FROM
  SALES
WHERE
  SALES_DATE = S_DATE;

RETURN T_ROWS;

EXCEPTION WHEN no_data_found THEN dbms_output.put_line ('No orders for the given date!');

WHEN others THEN dbms_output.put_line ('Error!');

END;

END;