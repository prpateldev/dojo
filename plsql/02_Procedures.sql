/*
 A procedure is a group of PL/SQL statements that you can call by name. It can accept values as input, process the data and return the output if required. 
 */
-- Syntax of a procedure
CREATE
OR REPLACE PROCEDURE procedure_name (
  parameter1 MODE DATATYPE [ DEFAULT expression],
  parameter1 MODE DATATYPE [ DEFAULT expression]
) AS -- Consider it as DECLARE you can define variables here
BEGIN -- Executable statements
[EXCEPTION
  WHEN exception_name
  THEN 
    executable statements ]
END procedure_name;

/*
 MODE is usually one of the follwing 
 IN | OUT | IN OUT
 
 IN - this is readonly user send value as parameter and we can not change in procedure
 OUT - if you want to pass back or return some value then use this mode. User can read the value after executing the procedure.
 IN OUT - both of IN and OUT functionality
 */
-- Example 1
CREATE PROCEDURE FETCH_SALES (S_ORDERID NUMBER) AS L_DATE SALES.SALES_DATE % TYPE;

L_ORDERID SALES.ORDER_ID % TYPE;

L_PRODUCTID SALES.PRODUCT_ID % TYPE;

L_CUSTOMERID SALES.CUSTOMER_ID % TYPE;

L_SALESPERSONID SALES.SALESPERSON_ID % TYPE;

L_QUANTITY SALES.QUANTITY % TYPE;

L_UNITPRICE SALES.UNIT_PRICE % TYPE;

L_SALESAMOUNT SALES.SALES_AMOUNT % TYPE;

L_TAXAMOUNT SALES.TAX_AMOUNT % TYPE;

L_TOTALAMOUNT SALES.TOTAL_AMOUNT % TYPE;

BEGIN
SELECT
  SALES_DATE,
  ORDER_ID,
  PRODUCT_ID,
  CUSTOMER_ID,
  SALESPERSON_ID,
  QUANTITY,
  UNIT_PRICE,
  SALES_AMOUNT,
  TAX_AMOUNT,
  TOTAL_AMOUNT INTO L_DATE,
  L_ORDERID,
  L_PRODUCTID,
  L_CUSTOMERID,
  L_SALESPERSONID,
  L_QUANTITY,
  L_UNITPRICE,
  L_SALESAMOUNT,
  L_TAXAMOUNT,
  L_TOTALAMOUNT
FROM
  SALES
WHERE
  ORDER_ID = S_ORDERID;

DBMS_OUTPUT.PUT_LINE (L_DATE);

DBMS_OUTPUT.PUT_LINE (L_ORDERID);

DBMS_OUTPUT.PUT_LINE (L_PRODUCTID);

DBMS_OUTPUT.PUT_LINE (L_CUSTOMERID);

DBMS_OUTPUT.PUT_LINE (L_SALESPERSONID);

DBMS_OUTPUT.PUT_LINE (L_QUANTITY);

DBMS_OUTPUT.PUT_LINE (L_UNITPRICE);

DBMS_OUTPUT.PUT_LINE (L_SALESAMOUNT);

DBMS_OUTPUT.PUT_LINE (L_TAXAMOUNT);

DBMS_OUTPUT.PUT_LINE (L_TOTALAMOUNT);

END;

EXEC FETCH_SALES (1269);

-- Example 2
CREATE
OR REPLACE PROCEDURE FETCH_SALES (S_ORDERID IN NUMBER, L_TOTALROWS OUT NUMBER) AS L_DATE SALES.SALES_DATE % TYPE;

L_ORDERID SALES.ORDER_ID % TYPE;

L_PRODUCTID SALES.PRODUCT_ID % TYPE;

L_CUSTOMERID SALES.CUSTOMER_ID % TYPE;

L_SALESPERSONID SALES.SALESPERSON_ID % TYPE;

L_QUANTITY SALES.QUANTITY % TYPE;

L_UNITPRICE SALES.UNIT_PRICE % TYPE;

L_SALESAMOUNT SALES.SALES_AMOUNT % TYPE;

L_TAXAMOUNT SALES.TAX_AMOUNT % TYPE;

L_TOTALAMOUNT SALES.TOTAL_AMOUNT % TYPE;

BEGIN
SELECT
  SALES_DATE,
  ORDER_ID,
  PRODUCT_ID,
  CUSTOMER_ID,
  SALESPERSON_ID,
  QUANTITY,
  UNIT_PRICE,
  SALES_AMOUNT,
  TAX_AMOUNT,
  TOTAL_AMOUNT INTO L_DATE,
  L_ORDERID,
  L_PRODUCTID,
  L_CUSTOMERID,
  L_SALESPERSONID,
  L_QUANTITY,
  L_UNITPRICE,
  L_SALESAMOUNT,
  L_TAXAMOUNT,
  L_TOTALAMOUNT
FROM
  SALES
WHERE
  ORDER_ID = S_ORDERID;

DBMS_OUTPUT.PUT_LINE (L_DATE);

DBMS_OUTPUT.PUT_LINE (L_ORDERID);

DBMS_OUTPUT.PUT_LINE (L_PRODUCTID);

DBMS_OUTPUT.PUT_LINE (L_CUSTOMERID);

DBMS_OUTPUT.PUT_LINE (L_SALESPERSONID);

DBMS_OUTPUT.PUT_LINE (L_QUANTITY);

DBMS_OUTPUT.PUT_LINE (L_UNITPRICE);

DBMS_OUTPUT.PUT_LINE (L_SALESAMOUNT);

DBMS_OUTPUT.PUT_LINE (L_TAXAMOUNT);

DBMS_OUTPUT.PUT_LINE (L_TOTALAMOUNT);

SELECT
  COUNT(1) INTO L_TOTALROWS
FROM
  SALES
WHERE
  SALES_DATE = L_DATE;

END;

DECLARE TOTAL_ROWS NUMBER;

BEGIN FETCH_SALES (1269, TOTAL_ROWS);

DBMS_OUTPUT.PUT_LINE ('Total Number of rows: ' || TOTAL_ROWS);

END;